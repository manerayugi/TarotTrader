import os
import base64
import pandas as pd
import streamlit as st

# ============= CSS ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Login =============
LOGIN_CSS = """
<style>
/* ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡∏ï‡πå‡πÉ‡∏ï‡πâ Header ‡∏™‡∏π‡∏á‡∏û‡∏≠‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤ login */
[data-testid="stAppViewContainer"] > .main > div.block-container {
  min-height: calc(100svh - 64px);
  display: flex;
  align-items: center;
  padding-top: 0 !important;
  padding-bottom: 0 !important;
}

/* ‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ß‡∏á‡∏Å‡∏•‡∏° */
.login-logo {
  width: 120px;
  height: 120px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #2f3651;
  display: block;
  margin: 0 auto 8px auto;
}

/* ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏à‡πÉ‡∏ï‡πâ‡πÇ‡∏•‡πÇ‡∏Å‡πâ */
.login-subtitle {
  text-align: center;
  font-size: 1.3rem;
  font-weight: 600;
  margin: 6px 0 18px 0;
}

/* ‡∏à‡∏±‡∏î‡∏õ‡∏∏‡πà‡∏° submit ‡∏Ç‡∏≠‡∏á st.form ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á */
div[data-testid="stFormSubmitButton"]{
  display: flex !important;
  justify-content: center !important;
}
div[data-testid="stFormSubmitButton"] button{
  width: auto !important;
}
</style>
"""

def inject_login_css():
    st.markdown(LOGIN_CSS, unsafe_allow_html=True)

# ============= First-run: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å =============
def render_initial_admin_form():
    st.markdown("<div style='text-align:center'>", unsafe_allow_html=True)
    if os.path.exists("assets/logo.png"):
        st.image("assets/logo.png", width=120)
    st.header("üîê ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)")
    st.markdown("</div>", unsafe_allow_html=True)

    c1, c2 = st.columns(2)
    with c1:
        new_admin_user = st.text_input("Admin Username", key="init_admin_user")
        new_admin_pass = st.text_input("Admin Password", type="password", key="init_admin_pass")
    with c2:
        new_admin_pass2 = st.text_input("Confirm Password", type="password", key="init_admin_pass2")
        if st.button("‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"):
            import func
            if not new_admin_user or not new_admin_pass:
                st.error("‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
            elif new_admin_pass != new_admin_pass2:
                st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
            else:
                if func.create_user(new_admin_user, new_admin_pass, role="admin"):
                    st.success("‡∏™‡∏£‡πâ‡∏≤‡∏á Admin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")
                else:
                    st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥")

# ============= Login Form (‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠) =============
def render_login_form():
    left, center, right = st.columns([1, 2, 1])
    with center:
        # ‡πÇ‡∏•‡πÇ‡∏Å‡πâ
        logo_path = "assets/logo.png"
        if os.path.exists(logo_path):
            with open(logo_path, "rb") as f:
                _b64 = base64.b64encode(f.read()).decode("utf-8")
            st.markdown(f"<img src='data:image/png;base64,{_b64}' class='login-logo' />",
                        unsafe_allow_html=True)

        # ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏à
        st.markdown("<div class='login-subtitle'>üîÆ Tarot Trader üíπ</div>", unsafe_allow_html=True)

        # ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        with st.form("login_form", clear_on_submit=False):
            u = st.text_input("Username", key="login_user")
            p = st.text_input("Password", type="password", key="login_pass")
            login_clicked = st.form_submit_button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")

        if login_clicked:
            import func
            user = func.verify_login(u, p)
            if user:
                st.session_state.auth = user
                st.success(f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {user['username']} ({user['role']})")
                st.rerun()
            else:
                st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

# ============= Sidebar (Branding + ‡πÄ‡∏°‡∏ô‡∏π + ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ + Logout) =============
def render_sidebar(auth: dict):
    # ---- Branding ----
    logo_path = "assets/logo.png"
    if os.path.exists(logo_path):
        with open(logo_path, "rb") as f:
            _b64 = base64.b64encode(f.read()).decode("utf-8")
        st.markdown(
            f"""
            <div style="text-align:center; margin-bottom:10px;">
                <img src="data:image/png;base64,{_b64}"
                     style="width:100px; height:100px; border-radius:50%; object-fit:cover;
                            border:2px solid #2f3651; margin-bottom:8px;">
                <h3 style="margin:0; font-size:1.2rem;">üîÆ Tarot Trader üíπ</h3>
            </div>
            """,
            unsafe_allow_html=True
        )
    else:
        st.markdown("<h3 style='text-align:center;'>üîÆ Tarot Trader üíπ</h3>", unsafe_allow_html=True)

    st.divider()

    # ---- Navigation ----
    if "page" not in st.session_state:
        st.session_state.page = "money"

    if st.button("üìä Port", use_container_width=True):
        st.session_state.page = "port"
    if st.button("üí∞ Money Management", use_container_width=True):
        st.session_state.page = "money"

    # admin only
    if auth.get("role") == "admin":
        if st.button("üë§ Users", use_container_width=True):
            st.session_state.page = "users"

    st.divider()

    # ---- User info + Logout ----
    st.markdown(
        f"""
        <div style='text-align:center;'>
            <p style='margin:4px 0;'>‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: <b>{auth['username']}</b><br>({auth['role']})</p>
        </div>
        """,
        unsafe_allow_html=True
    )

    if st.button("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", use_container_width=True, key="logout"):
        st.session_state.auth = None
        st.rerun()

# ============= Pages =============
def render_port_page():
    st.header("üìä ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏•‡∏á‡∏ó‡∏∏‡∏ô")
    st.info("‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")

def render_users_admin_page():
    import func
    st.header("üë§ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

    c1, c2 = st.columns([1, 1])
    with c1:
        st.markdown("**‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà**")
        nuser = st.text_input("Username ‡πÉ‡∏´‡∏°‡πà")
        npass = st.text_input("Password", type="password")
        nrole = st.selectbox("Role", ["user", "admin"])
        if st.button("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"):
            if not nuser or not npass:
                st.error("‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
            else:
                if func.create_user(nuser, npass, role=nrole):
                    st.success("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")

    with c2:
        st.markdown("**‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô**")
        ch_user = st.text_input("Username ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™")
        ch_pass = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", type="password")
        if st.button("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"):
            if not ch_user or not ch_pass:
                st.error("‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
            else:
                if func.change_password(ch_user, ch_pass):
                    st.success("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

    st.divider()
    st.markdown("**‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î**")
    users = func.list_users()
    if users:
        dfu = pd.DataFrame(users, columns=["id", "username", "role", "created_at"])
        st.dataframe(dfu, use_container_width=True, height=min(400, (len(dfu)+2)*33))
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

    st.divider()
    st.markdown("**‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ**")
    del_user = st.text_input("Username ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö")
    if st.button("‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"):
        if del_user == st.session_state.auth["username"]:
            st.error("‡∏´‡πâ‡∏≤‡∏°‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        else:
            if func.delete_user(del_user):
                st.success("‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")

# ============= Money Management =============
def render_mm_tabs():
    tabs = st.columns([1.6, 1.4, 1.4, 3])
    with tabs[0]:
        if st.button("üßÆ ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å Lot", use_container_width=True):
            st.session_state.mm_tab = "sizing"
    with tabs[1]:
        if st.button("üìè ‡∏£‡∏∞‡∏¢‡∏∞ SL ‚Üí Lot", use_container_width=True):
            st.session_state.mm_tab = "sl"
    with tabs[2]:
        if st.button("üß™ (‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô)", use_container_width=True):
            st.session_state.mm_tab = "tbd2"
    st.divider()

def render_mm_position_sizing(func_module):
    st.subheader("üßÆ ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å Lot (Position Sizing ‚Äì Max & Optimal)")

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    preset_names = list(func_module.SYMBOL_PRESETS.keys())
    left, right = st.columns([2, 1])
    with left:
        symbol_name = st.selectbox(
            "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
            preset_names,
            index=preset_names.index("XAUUSD") if "XAUUSD" in preset_names else 0
        )
    spec = func_module.SYMBOL_PRESETS[symbol_name]

    with right:
        st.write("‡∏™‡πÄ‡∏õ‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤")
        st.caption(
            f"- Contract size: {spec.contract_size}\n"
            f"- Min lot: {spec.min_lot} | Step: {spec.lot_step}\n"
            f"- 1 point = ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô {spec.price_point}\n"
            f"- 1 pip = {spec.pip_points} points"
        )

    # ‡∏£‡∏≤‡∏Ñ‡∏≤
    st.markdown("#### ‡∏£‡∏≤‡∏Ñ‡∏≤")
    c1, c2, _ = st.columns([1, 1, 2])
    with c1:
        use_fetch = st.toggle("‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ realtime", value=False)
    with c2:
        default_price = 0.0
        if use_fetch:
            fetched = func_module.fetch_price_yf(symbol_name)  # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° XAUT-USD ‡∏Å‡πà‡∏≠‡∏ô
            if fetched:
                default_price = fetched
                st.success(f"‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {fetched:,.2f}")
            else:
                st.warning("‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á")
        price = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤ (USD)", value=float(default_price), step=0.1, min_value=0.0)

    st.divider()

    # Max Lot
    st.markdown("### 1) Max Lot ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏ô + Leverage")
    cA, cB, cC, cD = st.columns([1, 1, 1, 1.6])
    with cA:
        balance = st.number_input("‡∏ó‡∏∏‡∏ô ($)", value=1000.0, step=100.0, min_value=0.0)
    with cB:
        leverage = st.number_input("Leverage", value=1000, step=50, min_value=1, format="%d")
    with cC:
        buffer_pct_ui = st.number_input("‡∏Å‡∏±‡∏ô‡πÑ‡∏ß‡πâ (Free Margin %)", value=0.0, step=1.0, min_value=0.0, max_value=90.0)
        buffer_pct = buffer_pct_ui / 100.0
    with cD:
        st.caption("‡∏™‡∏π‡∏ï‡∏£: Maxlot = (‡∏ó‡∏∏‡∏ô * Leverage) / (Price * ContractSize)")

    if st.button("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì MaxLot", type="primary"):
        m1 = func_module.margin_per_1lot(price, float(leverage), spec) if (price > 0 and leverage > 0) else 0.0
        maxlot = func_module.max_lot(balance, float(price), float(leverage), spec, buffer_pct)
        st.success(f"MaxLot ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: **{maxlot:.2f} lot**")
        if m1 > 0:
            st.caption(f"(Margin/lot ‡πÄ‡∏ä‡∏¥‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥ ‚âà (Contract √ó Price) / Leverage = ${m1:,.2f}/lot)")

    st.divider()

    # Optimal Lot
    st.markdown("### 2) Optimal Lot ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏ó‡∏ô‡πÑ‡∏î‡πâ")
    u1, u2, u3, u4 = st.columns([1, 1, 1, 1.6])
    with u1:
        unit = st.selectbox("‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏£‡∏∞‡∏¢‡∏∞", ["points", "pips"], index=0)
    with u2:
        distance_input = st.number_input(f"‡∏£‡∏∞‡∏¢‡∏∞ Stop ({unit})", value=10000, step=1, min_value=0, format="%d")
    with u3:
        mode_safe = st.toggle("‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (Risk%)", value=True)
    with u4:
        risk_percent = st.number_input("Risk ‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πâ (%)", value=1.0, step=0.25, min_value=0.0, disabled=not mode_safe)

    distance_points = float(distance_input) * (spec.pip_points if unit == "pips" else 1.0)

    vpp = func_module.value_per_point_per_lot(spec)
    st.caption(f"‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏™‡∏π‡∏ï‡∏£: lot = (‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ) / (‡∏£‡∏∞‡∏¢‡∏∞ {distance_points:.0f} points √ó ${vpp:.2f}/point/lot)")

    if st.button("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OptimalLot"):
        if distance_points <= 0:
            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏∞‡∏¢‡∏∞ Stop > 0")
        else:
            if mode_safe and risk_percent > 0:
                lots = func_module.optimal_lot_by_points_risk(balance, risk_percent, distance_points, spec)
                pnl_stop = -func_module.pnl_usd(lots, distance_points, spec)
                st.info(f"‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ: ${balance:,.2f} | ‡∏£‡∏∞‡∏¢‡∏∞ {distance_points:.0f} points")
                st.success(f"OptimalLot (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢): **{lots:.2f} lot**")
                st.caption(f"‡∏ñ‡πâ‡∏≤‡πÇ‡∏î‡∏ô Stop ‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ${pnl_stop:,.2f}")
            else:
                lots = func_module.optimal_lot_by_points_allin(balance, distance_points, spec)
                pnl_stop = -func_module.pnl_usd(lots, distance_points, spec)
                st.info(f"‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ: ${balance:,.2f} | ‡∏£‡∏∞‡∏¢‡∏∞ {distance_points:.0f} points")
                st.success(f"OptimalLot (All-in): **{lots:.2f} lot**")
                st.caption(f"‡∏ñ‡πâ‡∏≤‡πÇ‡∏î‡∏ô Stop ‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ${pnl_stop:,.2f}")

    st.divider()
    st.markdown("#### ‡∏™‡∏£‡∏∏‡∏õ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà (‡∏ï‡πà‡∏≠ 1 lot)")
    df = pd.DataFrame({
        "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£": ["$/point/lot", f"$/pip/lot (1 pip = {spec.pip_points} points)"],
        "Value ($)": [func_module.value_per_point_per_lot(spec), func_module.value_per_pip_per_lot(spec)]
    })
    st.dataframe(df, use_container_width=True)

def render_mm_sl_to_lot(func_module):
    st.subheader("üìè ‡∏£‡∏∞‡∏¢‡∏∞ SL ‚Üí ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Lot")

    left, right = st.columns([1, 1.2])
    with left:
        price = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (USD)", value=0.0, step=0.1, min_value=0.0)
        balance = st.number_input("‡∏ó‡∏∏‡∏ô ($)", value=1000.0, step=100.0, min_value=0.0)

        loss_mode = st.selectbox("‡∏Å‡∏£‡∏≠‡∏Å Loss ‡πÄ‡∏õ‡πá‡∏ô", ["%", "$"], index=0)
        if loss_mode == "%":
            loss_val = st.number_input("Loss (%)", value=10.0, step=0.5, min_value=0.0)
        else:
            loss_val = st.number_input("Loss ($)", value=100.0, step=10.0, min_value=0.0)

        risk_amount, loss_pct = func_module.loss_to_amount_and_pct(balance, loss_mode, loss_val)
        if loss_mode == "%":
            st.caption(f"Loss ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ‚âà **${risk_amount:,.2f}**")
        else:
            st.caption(f"Loss ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ‚âà **{loss_pct:.2f}%** ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏ô")

        leverage = st.number_input("Leverage", value=1000, step=50, min_value=1, format="%d")
        custom_points = st.number_input("Stop Loss (Point) - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á", value=1000, step=1, min_value=0, format="%d")

        st.caption("‡∏™‡∏π‡∏ï‡∏£ MaxLot = (‡∏ó‡∏∏‡∏ô √ó Leverage) / (Price √ó ContractSize)")
        st.caption("‡∏™‡∏π‡∏ï‡∏£ Lot (‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î) = ‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ / ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î")

    with right:
        max_lot_val = func_module.maxlot_theoretical(balance, float(leverage), float(price), func_module.XAUUSD_SPEC)

        std_points = [10, 50, 100, 200, 300, 500, 1000, 1500, 2000, 5000, 10000, 20000]
        if custom_points and custom_points not in std_points:
            std_points.append(int(custom_points))
        std_points = sorted(std_points)

        rows = []
        for pts, lots in func_module.lots_from_stops(risk_amount, std_points):
            exceeds = lots > max_lot_val if max_lot_val > 0 else False
            rows.append({"Stop Loss (Point)": pts, "Lot (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì)": lots, "‡πÄ‡∏Å‡∏¥‡∏ô MaxLot?": "‚ö†Ô∏è ‡πÉ‡∏ä‡πà" if exceeds else ""})
        df = pd.DataFrame(rows)

        def _hl(row):
            return [
                'background-color: #f3e8ff; color: #111; font-weight: 600;' if row["‡πÄ‡∏Å‡∏¥‡∏ô MaxLot?"] else ''
                for _ in row
            ]

        sty = (
            df.style
              .apply(_hl, axis=1)
              .set_table_styles([{'selector': 'th', 'props': [('text-align', 'center')]}])
              .set_properties(**{'text-align': 'center'})
              .format({"Stop Loss (Point)": "{:,.0f}", "Lot (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì)": "{:.2f}"})
        )

        st.markdown(f"**MaxLot (‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô):** {max_lot_val:.2f} lot")
        st.dataframe(sty, use_container_width=True, height=(len(df) + 2) * 33)

        if custom_points > 0:
            custom_lot = risk_amount / float(custom_points)
            exceeds_custom = custom_lot > max_lot_val if max_lot_val > 0 else False

            st.subheader("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á")
            st.write(f"Stop Loss (Point): **{custom_points:,}** ‚Üí Lot ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏≠‡∏≠‡∏Å ‚âà **{custom_lot:.2f} lot**")
            if exceeds_custom:
                st.warning("‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏Å‡∏¥‡∏ô MaxLot ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ")