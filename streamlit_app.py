# streamlit_app.py
import os, base64
import datetime
import pandas as pd
import streamlit as st
from sqlalchemy import text  # ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Users (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏)

# ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
import auth
import home
import port
import knowledge_index
import risk_money_index as mm  # ‡∏°‡∏µ render_page() ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö public ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ó‡πá‡∏ö '‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å Lot'

# ========================= App Config =========================
st.set_page_config(page_title="üîÆ Tarot Trader üíπ", page_icon="üîÆ", layout="wide")

# ========================= AUTH Bootstrap =====================
auth.ensure_users_table()
first_run = auth.ensure_initial_admin()   # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ user ‡πÄ‡∏•‡∏¢? ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
auth.init_auth()                          # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° st.session_state["auth"]

# ========================= Helpers ============================
def _sidebar_logo_and_title():
    if os.path.exists("assets/logo.png"):
        with open("assets/logo.png", "rb") as _f:
            _b64 = base64.b64encode(_f.read()).decode("utf-8")
        st.sidebar.markdown(
            f"<img src='data:image/png;base64,{_b64}' "
            "style='display:block;margin:4px auto 10px auto;width:84px;height:84px;"
            "border-radius:50%;object-fit:cover;border:2px solid #2f3651;'/>",
            unsafe_allow_html=True,
        )
    st.sidebar.markdown(
        "<div style='text-align:center;font-weight:700;'>üîÆ Tarot Trader üíπ</div>",
        unsafe_allow_html=True,
    )

def _goto(page: str):
    st.session_state.page = page
    st.rerun()

# ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏à
if "page" not in st.session_state:
    st.session_state.page = "home"

# ========================= Sidebar ============================
with st.sidebar:
    _sidebar_logo_and_title()
    st.divider()

    # ===== ‡πÄ‡∏°‡∏ô‡∏π (‡πÉ‡∏ô Sidebar) =====
    st.markdown("**‡πÄ‡∏°‡∏ô‡∏π**")
    if st.button("üè† Home", use_container_width=True):
        _goto("home")
    if st.button("üìö Trader‚Äôs Wisdom", use_container_width=True):
        _goto("knowledge")
    if st.button("üí∞ Money Management", use_container_width=True):
        _goto("mm")
    if st.button("üìä Port", use_container_width=True):
        _goto("port")

    # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin: Users
    auth_info = st.session_state.get("auth", {})
    is_admin = bool(
        auth_info.get("logged_in")
        and auth_info.get("user")
        and auth_info["user"].get("role") == "admin"
    )
    if is_admin:
        if st.button("üë§ Users", use_container_width=True):
            _goto("users")

    st.divider()

    # ===== ‡∏õ‡∏∏‡πà‡∏° Login/Logout (Sidebar) =====
    if not auth_info.get("logged_in"):
        if st.button("üîê Login", use_container_width=True, type="primary"):
            _goto("login")
        st.caption("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    else:
        u = auth_info["user"]
        st.caption(f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: **{u.get('username','?')}** ({u.get('role','user')})")
        if u.get("expiry_at"):
            st.caption(f"‚è≥ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: {u.get('expiry_at')}")
        if st.button("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", use_container_width=True):
            auth.logout()  # ‡∏•‡πâ‡∏≤‡∏á state ‡∏ú‡πà‡∏≤‡∏ô helper

# ========================= Content Router =====================
page = st.session_state.page

# ---------- ‡∏´‡∏ô‡πâ‡∏≤ Login (‡∏Å‡∏î‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô Sidebar) ----------
if page == "login":
    # ‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö Home
    if st.session_state.get("auth", {}).get("logged_in"):
        _goto("home")

    # CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Login (padding + ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏≤‡∏á + ‡πÇ‡∏•‡πÇ‡∏Å‡πâ/‡πÑ‡∏ï‡πÄ‡∏ï‡∏¥‡∏•)
    st.markdown("""
    <style>
      .block-container{ padding-top: 1 !important; padding-bottom: 0 !important; }
      .login-logo{
        width:120px;height:120px;border-radius:50%;
        object-fit:cover;border:2px solid #2f3651;display:block;margin:0 auto 12px auto;
      }
      .login-title{ text-align:center; margin:6px 0 18px 0; font-size:1.25rem; }
      .login-btn-wrap{ display:flex; justify-content:center; align-items:center; width:100%; margin-top:12px; }
    </style>
    """, unsafe_allow_html=True)

    # ====== ‡∏™‡∏£‡πâ‡∏≤‡∏á Admin ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ user) ======
    if first_run:
        st.markdown("<div style='text-align:center'>", unsafe_allow_html=True)
        if os.path.exists("assets/logo.png"):
            st.image("assets/logo.png", width=120)
        st.header("üîê ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)")
        st.markdown("</div>", unsafe_allow_html=True)

        c1, c2 = st.columns(2)
        with c1:
            new_admin_user = st.text_input("Admin Username", key="init_admin_user")
            new_admin_pass = st.text_input("Admin Password", type="password", key="init_admin_pass")
        with c2:
            new_admin_pass2 = st.text_input("Confirm Password", type="password", key="init_admin_pass2")
            if st.button("‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"):
                if not new_admin_user or not new_admin_pass:
                    st.error("‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
                elif new_admin_pass != new_admin_pass2:
                    st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
                else:
                    if auth.create_user(new_admin_user, new_admin_pass, role="admin"):
                        st.success("‡∏™‡∏£‡πâ‡∏≤‡∏á Admin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")
                    else:
                        st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")

        st.divider()

    # ====== ‡∏ü‡∏≠‡∏£‡πå‡∏° Login (‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ö‡∏ö 2‚Äì1‚Äì2 + ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏≤‡∏á) ======
    col_left, col_center, col_right = st.columns([2, 1.4, 2])
    with col_center:
        # ‡πÇ‡∏•‡πÇ‡∏Å‡πâ + ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏à
        logo_path = "assets/logo.png"
        if os.path.exists(logo_path):
            with open(logo_path, "rb") as f:
                _b64 = base64.b64encode(f.read()).decode("utf-8")
            st.markdown(f"<img src='data:image/png;base64,{_b64}' class='login-logo' />", unsafe_allow_html=True)
        st.markdown("<div class='login-title'>üîÆ Tarot Trader üíπ</div>", unsafe_allow_html=True)

        # ‡∏ü‡∏≠‡∏£‡πå‡∏° Login (‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ .login-btn-wrap)
        with st.form("login_form", clear_on_submit=False):
            u = st.text_input("Username", key="login_user")
            p = st.text_input("Password", type="password", key="login_pass")
            bL, bC, bR = st.columns([5, 6, 5])
            with bC:
                st.markdown("<div class='login-btn-wrap'>", unsafe_allow_html=True)
                submitted = st.form_submit_button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
                st.markdown("</div>", unsafe_allow_html=True)

        if submitted:
            user, err = auth.verify_login(u.strip(), p)
            if user and not err:
                st.session_state.auth = {
                    "logged_in": True,
                    "user": user,  # {"id","username","role","expiry_at"}
                    "at": datetime.datetime.utcnow().isoformat()
                }
                st.session_state.page = "home"
                st.rerun()
            else:
                st.error("‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏" if err == "expired" else "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

# ---------- ‡∏´‡∏ô‡πâ‡∏≤ Home (‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞) ----------
elif page == "home":
    home.render_home_page()

# ---------- ‡∏´‡∏ô‡πâ‡∏≤ Trader‚Äôs Wisdom (‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞) ----------
elif page == "knowledge":
    knowledge_index.render_knowledge_index()

# ---------- ‡∏´‡∏ô‡πâ‡∏≤ Money Management (‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ó‡πá‡∏ö '‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å Lot') ----------
elif page == "mm":
    # ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô mm.render_page() ‡∏à‡∏∞‡πÉ‡∏ä‡πâ auth.require_login_or_public("mm_sizing_only")
    mm.render_page()

# ---------- ‡∏´‡∏ô‡πâ‡∏≤ Port (private ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤) ----------
elif page == "port":
    if auth.require_login_or_public("private"):  # ‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå
        st.subheader("üìä Port")
        port.render_port_page()

# ---------- ‡∏´‡∏ô‡πâ‡∏≤ Users (admin only) ----------
elif page == "users":
    auth_info = st.session_state.get("auth", {})
    if not (auth_info.get("logged_in") and auth_info.get("user") and auth_info["user"].get("role") == "admin"):
        st.error("‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
        st.stop()

    st.header("üë§ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

    # -------- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ --------
    c1, c2 = st.columns([1, 1])
    with c1:
        st.markdown("**‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà**")
        nuser = st.text_input("Username ‡πÉ‡∏´‡∏°‡πà")
        npass = st.text_input("Password", type="password")
        nrole = st.selectbox("Role", ["user", "admin"])
        # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏≠‡∏á (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô) ‚Äî ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏±‡πâ‡∏á +1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        nexp = st.text_input("Expiry (YYYY-MM-DD) (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á = +1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)")
        if st.button("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"):
            exp_val = nexp.strip() or None
            ok = auth.create_user(nuser, npass, role=nrole, expiry_at=exp_val)
            if ok:
                st.success("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")

    with c2:
        st.markdown("**‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô**")
        ch_user = st.text_input("Username ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™")
        ch_pass = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", type="password")
        if st.button("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"):
            if not ch_user or not ch_pass:
                st.error("‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
            else:
                if auth.change_password(ch_user, ch_pass):
                    st.success("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

    st.divider()
    st.markdown("**‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î**")
    users = auth.list_users()  # id, username, role, created_at, expiry_at
    if users:
        dfu = pd.DataFrame(users, columns=["id", "username", "role", "created_at", "expiry_at"])
        st.dataframe(dfu, use_container_width=True, height=min(440, (len(dfu)+2)*33))
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

    st.divider()
    st.markdown("**‡πÅ‡∏Å‡πâ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (Expiry)**")
    ux = st.text_input("Username ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏")
    new_exp = st.text_input("Expiry ‡πÉ‡∏´‡∏°‡πà (YYYY-MM-DD) | ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á = ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏")
    cex1, cex2 = st.columns([1,1])
    with cex1:
        if st.button("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏"):
            exp_val = new_exp.strip() or None
            if auth.update_expiry(ux, exp_val):
                st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    with cex2:
        if st.button("‡∏Ç‡∏¢‡∏≤‡∏¢ +1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"):
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô NOW() + 1 month ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            with auth.get_engine().begin() as conn:
                res = conn.execute(
                    text("UPDATE users SET expiry_at = NOW() + INTERVAL '1 month' WHERE username = :u"),
                    {"u": ux.strip()}
                )
            if res.rowcount > 0:
                st.success("‡∏Ç‡∏¢‡∏≤‡∏¢ +1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    st.divider()
    st.markdown("**‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ**")
    del_user = st.text_input("Username ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö")
    if st.button("‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"):
        cur = st.session_state.get("auth", {}).get("user", {})
        if del_user == cur.get("username"):
            st.error("‡∏´‡πâ‡∏≤‡∏°‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        else:
            if auth.delete_user(del_user):
                st.success("‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")

# ---------- ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ----------
else:
    st.info("Coming soon‚Ä¶")