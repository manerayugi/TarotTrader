import os, base64
import streamlit as st
import pandas as pd

import auth
import calc as mm

# ========================= App Config =========================
st.set_page_config(page_title="üîÆ Tarot Trader üíπ", page_icon="üîÆ", layout="wide")

# ---------- CSS ----------
st.markdown("""
<style>
/* ‡∏à‡∏±‡∏î layout ‡∏´‡∏ô‡πâ‡∏≤ login: ‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô + ‡∏ä‡∏¥‡∏î‡∏ö‡∏ô (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏Å‡∏£‡∏≠‡∏•‡πå) */
.login-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;          /* ‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô */
  justify-content: flex-start;  /* ‡∏ä‡∏¥‡∏î‡∏ö‡∏ô */
  min-height: 10vh;             /* ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ */
  padding-top: 60px;            /* ‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡∏ö‡∏ô */
}

/* Logo ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Login */
.login-logo{
  width:120px; height:120px; border-radius:50%;
  object-fit:cover; border:2px solid #2f3651; display:block; margin:0 auto 12px auto;
}

/* ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏à ‡∏´‡∏ô‡πâ‡∏≤ Login */
.login-title{ text-align:center; margin:6px 0 18px 0; font-size:1.25rem; }

/* Sidebar: title center + ‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á */
.sidebar-title{ text-align:center; font-weight:700; }
.sidebar-logo{ display:block; margin:0 auto 8px auto; border-radius:8px; }

/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á: ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á */
[data-testid="stDataFrame"] table td, 
[data-testid="stDataFrame"] table th { text-align: center; }

/* --- ‡∏õ‡∏∏‡πà‡∏° Login ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á column --- */
.login-btn-wrap {
  display: flex;
  justify-content: center;  /* ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô */
  align-items: center;      /* ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á */
  width: 100%;
  margin-top: 12px;
}

/* ‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÉ‡∏ô Sidebar: ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏à‡∏£‡∏¥‡∏á */
.sidebar-logo-circle{
  display:block;
  margin:0 auto 10px auto;   /* ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô */
  width: 84px; 
  height: 84px;
  border-radius: 50%;         /* ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏° */
  object-fit: cover;          /* ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏Å‡∏£‡∏≠‡∏ö‡∏ß‡∏á‡∏Å‡∏•‡∏° */
  border: 2px solid #2f3651;  /* ‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡∏ö‡∏≤‡∏á ‡πÜ */
}
</style>
""", unsafe_allow_html=True)

# ---------- AUTH ----------
if "auth" not in st.session_state:
    st.session_state.auth = None

auth.ensure_users_table()

# ---------- First-run: create admin (‡∏Å‡∏£‡∏ì‡∏µ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ user) ----------
if auth.ensure_initial_admin() and not st.session_state.auth:
    st.markdown("<div style='text-align:center'>", unsafe_allow_html=True)
    if os.path.exists("assets/logo.png"):
        st.image("assets/logo.png", width=120)
    st.header("üîê ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)")
    st.markdown("</div>", unsafe_allow_html=True)

    c1, c2 = st.columns(2)
    with c1:
        new_admin_user = st.text_input("Admin Username", key="init_admin_user")
        new_admin_pass = st.text_input("Admin Password", type="password", key="init_admin_pass")
    with c2:
        new_admin_pass2 = st.text_input("Confirm Password", type="password", key="init_admin_pass2")
        if st.button("‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"):
            if not new_admin_user or not new_admin_pass:
                st.error("‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
            elif new_admin_pass != new_admin_pass2:
                st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
            else:
                if auth.create_user(new_admin_user, new_admin_pass, role="admin"):
                    st.success("‡∏™‡∏£‡πâ‡∏≤‡∏á Admin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")
                else:
                    st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")

# ---------- Login Gate ----------
if not st.session_state.auth:
    st.markdown("""
    <style>
      .block-container{ padding-top: 1 !important; padding-bottom: 0 !important; }
    </style>
    """, unsafe_allow_html=True)
    
    # ‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö 2-1-2
    col_left, col_center, col_right = st.columns([2, 1, 2])
    with col_center:
        # ‡πÇ‡∏•‡πÇ‡∏Å‡πâ + ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏à
        logo_path = "assets/logo.png"
        if os.path.exists(logo_path):
            with open(logo_path, "rb") as f:
                _b64 = base64.b64encode(f.read()).decode("utf-8")
            st.markdown(f"<img src='data:image/png;base64,{_b64}' class='login-logo' />", unsafe_allow_html=True)
        st.markdown("<div class='login-title'>üîÆ Tarot Trader üíπ</div>", unsafe_allow_html=True)

        # ‡∏ü‡∏≠‡∏£‡πå‡∏° Login (‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ .login-btn-wrap)
        with st.form("login_form", clear_on_submit=False):
            u = st.text_input("Username", key="login_user")
            p = st.text_input("Password", type="password", key="login_pass")
            # ‡πÉ‡∏´‡∏°‡πà: ‡∏à‡∏±‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 2‚Äì1‚Äì2
            bL, bC, bR = st.columns([5, 6, 5])
            with bC:
                st.markdown("<div class='login-btn-wrap'>", unsafe_allow_html=True)
                login_clicked = st.form_submit_button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
                st.markdown("</div>", unsafe_allow_html=True)

        if login_clicked:
            user = auth.verify_login(u, p)
            if user:
                st.session_state.auth = user
                st.rerun()
            else:
                st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

    st.markdown("</div>", unsafe_allow_html=True)  # .login-wrapper
    st.stop()

# ========================= Sidebar =========================
with st.sidebar:
    # ‡πÇ‡∏•‡πÇ‡∏Å‡πâ + ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏à
    if os.path.exists("assets/logo.png"):
        with open("assets/logo.png", "rb") as _f:
            _b64 = base64.b64encode(_f.read()).decode("utf-8")
            st.markdown(f"<img src='data:image/png;base64,{_b64}' class='sidebar-logo-circle' />", unsafe_allow_html=True)
    st.markdown("<div class='sidebar-title'>üîÆ Tarot Trader üíπ</div>", unsafe_allow_html=True)
    st.divider()

    # ‡πÄ‡∏°‡∏ô‡∏π
    if "page" not in st.session_state:
        st.session_state.page = "money"

    if st.button("üìä Port", use_container_width=True):
        st.session_state.page = "port"
    if st.button("üí∞ Money Management", use_container_width=True):
        st.session_state.page = "money"
    if st.session_state.auth.get("role") == "admin":
        if st.button("üë§ Users", use_container_width=True):
            st.session_state.page = "users"

    st.divider()
    # ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ + Logout (‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô sidebar)
    st.caption(f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: **{st.session_state.auth['username']}** ({st.session_state.auth['role']})")
    if st.button("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", use_container_width=True, type="primary"):
        st.session_state.auth = None
        st.rerun()

# ========================= Content =========================
page = st.session_state.page

if page == "port":
    st.header("üìä ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏•‡∏á‡∏ó‡∏∏‡∏ô")
    st.info("‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")

elif page == "users":
    # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if st.session_state.auth.get("role") != "admin":
        st.error("‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
        st.stop()

    st.header("üë§ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

    c1, c2 = st.columns([1, 1])
    with c1:
        st.markdown("**‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà**")
        nuser = st.text_input("Username ‡πÉ‡∏´‡∏°‡πà")
        npass = st.text_input("Password", type="password")
        nrole = st.selectbox("Role", ["user", "admin"])
        if st.button("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"):
            if not nuser or not npass:
                st.error("‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
            else:
                if auth.create_user(nuser, npass, role=nrole):
                    st.success("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")

    with c2:
        st.markdown("**‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô**")
        ch_user = st.text_input("Username ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™")
        ch_pass = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà", type="password")
        if st.button("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"):
            if not ch_user or not ch_pass:
                st.error("‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
            else:
                if auth.change_password(ch_user, ch_pass):
                    st.success("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

    st.divider()
    st.markdown("**‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î**")
    users = auth.list_users()
    if users:
        dfu = pd.DataFrame(users, columns=["id", "username", "role", "created_at"])
        st.dataframe(dfu, use_container_width=True, height=min(400, (len(dfu)+2)*33))
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

    st.divider()
    st.markdown("**‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ**")
    del_user = st.text_input("Username ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö")
    if st.button("‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"):
        if del_user == st.session_state.auth["username"]:
            st.error("‡∏´‡πâ‡∏≤‡∏°‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        else:
            if auth.delete_user(del_user):
                st.success("‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")

else:
    # ---------------- Money Management ----------------
    st.header("üí∞ Money Management")
    # ‡πÉ‡∏ä‡πâ renderer ‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å calc.py (‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô)
    mm.render_money_management_page() 