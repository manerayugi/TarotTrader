import streamlit as st
import pandas as pd
import func

# ========================= App Config =========================
st.set_page_config(page_title="üîÆ Tarot Trader üíπ", page_icon="üîÆ", layout="wide")

# ========================= Sidebar =========================
st.sidebar.title("üîÆ Tarot Trader üíπ")

if "page" not in st.session_state:
    st.session_state.page = "money"

if st.sidebar.button("üìä Port", use_container_width=True):
    st.session_state.page = "port"
if st.sidebar.button("üí∞ Money Management", use_container_width=True):
    st.session_state.page = "money"

page = st.session_state.page

# ========================= Main =========================
if page == "port":
    st.header("üìä ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏•‡∏á‡∏ó‡∏∏‡∏ô")
    st.info("‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
else:
    # ---------------- Money Management ----------------
    st.header("üí∞ Money Management")

    if "mm_tab" not in st.session_state:
        st.session_state.mm_tab = "sizing"

    tabs = st.columns([1.6, 1.4, 1.4, 3])
    with tabs[0]:
        if st.button("üßÆ ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å Lot", use_container_width=True):
            st.session_state.mm_tab = "sizing"
    with tabs[1]:
        if st.button("üìè ‡∏£‡∏∞‡∏¢‡∏∞ SL ‚Üí Lot", use_container_width=True):
            st.session_state.mm_tab = "sl"
    with tabs[2]:
        if st.button("üß™ (‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô)", use_container_width=True):
            st.session_state.mm_tab = "tbd2"

    st.divider()

    # ---------------- Tab 1: ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å Lot ----------------
    if st.session_state.mm_tab == "sizing":
        st.subheader("üßÆ ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å Lot (Position Sizing ‚Äì Max & Optimal)")

        # 1) ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏≠‡∏¥‡∏á‡∏™‡πÄ‡∏õ‡∏Å‡∏à‡∏≤‡∏Å func.SYMBOL_PRESETS)
        preset_names = list(func.SYMBOL_PRESETS.keys())
        left, right = st.columns([2, 1])
        with left:
            symbol_name = st.selectbox(
                "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
                preset_names,
                index=preset_names.index("XAUUSD") if "XAUUSD" in preset_names else 0
            )
        spec = func.SYMBOL_PRESETS[symbol_name]

        with right:
            st.write("‡∏™‡πÄ‡∏õ‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤")
            st.caption(
                f"- Contract size: {spec.contract_size}\n"
                f"- Min lot: {spec.min_lot} | Step: {spec.lot_step}\n"
                f"- 1 point = ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô {spec.price_point}\n"
                f"- 1 pip = {spec.pip_points} points"
            )

        # 2) ‡∏£‡∏≤‡∏Ñ‡∏≤ (‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô func ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        st.markdown("#### ‡∏£‡∏≤‡∏Ñ‡∏≤")
        c1, c2, _ = st.columns([1, 1, 2])
        with c1:
            use_fetch = st.toggle("‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ realtime", value=False)
        with c2:
            default_price = 0.0
            if use_fetch:
                fetched = func.fetch_price_yf(symbol_name)  # ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° XAUT-USD ‡∏Å‡πà‡∏≠‡∏ô (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô func.py)
                if fetched:
                    default_price = fetched
                    st.success(f"‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {fetched:,.2f}")
                else:
                    st.warning("‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á")
            price = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤ (USD)", value=float(default_price), step=0.1, min_value=0.0)

        st.divider()

        # 3) Max Lot (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏ô func)
        st.markdown("### 1) Max Lot ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏ô + Leverage")
        cA, cB, cC, cD = st.columns([1, 1, 1, 1.6])
        with cA:
            balance = st.number_input("‡∏ó‡∏∏‡∏ô ($)", value=1000.0, step=100.0, min_value=0.0)
        with cB:
            leverage = st.number_input("Leverage", value=1000, step=50, min_value=1, format="%d")
        with cC:
            buffer_pct_ui = st.number_input("‡∏Å‡∏±‡∏ô‡πÑ‡∏ß‡πâ (Free Margin %)", value=0.0, step=1.0, min_value=0.0, max_value=90.0)
            buffer_pct = buffer_pct_ui / 100.0
        with cD:
            st.caption("‡∏™‡∏π‡∏ï‡∏£: Maxlot = (‡∏ó‡∏∏‡∏ô * Leverage) / (Price * ContractSize)")

        if st.button("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì MaxLot", type="primary"):
            # margin/lot (‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥) ‡πÅ‡∏•‡∏∞ max_lot (‡πÄ‡∏ú‡∏∑‡πà‡∏≠ buffer) ‚Äî ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô func
            m1 = func.margin_per_1lot(price, float(leverage), spec) if (price > 0 and leverage > 0) else 0.0
            maxlot = func.max_lot(balance, float(price), float(leverage), spec, buffer_pct)
            st.success(f"MaxLot ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: **{maxlot:.2f} lot**")
            if m1 > 0:
                st.caption(f"(Margin/lot ‡πÄ‡∏ä‡∏¥‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥ ‚âà (Contract √ó Price) / Leverage = ${m1:,.2f}/lot)")

        st.divider()

        # 4) Optimal Lot (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏ô func)
        st.markdown("### 2) Optimal Lot ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏ó‡∏ô‡πÑ‡∏î‡πâ")
        u1, u2, u3, u4 = st.columns([1, 1, 1, 1.6])
        with u1:
            unit = st.selectbox("‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏£‡∏∞‡∏¢‡∏∞", ["points", "pips"], index=0)
        with u2:
            distance_input = st.number_input(
                f"‡∏£‡∏∞‡∏¢‡∏∞ Stop ({unit})",
                value=10000,
                step=1,
                min_value=0,
                format="%d"
            )
        with u3:
            mode_safe = st.toggle("‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (Risk%)", value=True)
        with u4:
            risk_percent = st.number_input("Risk ‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πâ (%)", value=1.0, step=0.25, min_value=0.0, disabled=not mode_safe)

        # ‡πÅ‡∏õ‡∏•‡∏á stop ‚Üí points
        distance_points = float(distance_input) * (spec.pip_points if unit == "pips" else 1.0)

        # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
        vpp = func.value_per_point_per_lot(spec)   # $/point/lot
        st.caption(f"‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏™‡∏π‡∏ï‡∏£: lot = (‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ) / (‡∏£‡∏∞‡∏¢‡∏∞ {distance_points:.0f} points √ó ${vpp:.2f}/point/lot)")

        if st.button("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OptimalLot"):
            if distance_points <= 0:
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏∞‡∏¢‡∏∞ Stop > 0")
            else:
                if mode_safe and risk_percent > 0:
                    lots = func.optimal_lot_by_points_risk(balance, risk_percent, distance_points, spec)
                    pnl_stop = -func.pnl_usd(lots, distance_points, spec)
                    st.info(f"‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ: ${balance:,.2f} | ‡∏£‡∏∞‡∏¢‡∏∞ {distance_points:.0f} points")
                    st.success(f"OptimalLot (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢): **{lots:.2f} lot**")
                    st.caption(f"‡∏ñ‡πâ‡∏≤‡πÇ‡∏î‡∏ô Stop ‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ${pnl_stop:,.2f}")
                else:
                    lots = func.optimal_lot_by_points_allin(balance, distance_points, spec)
                    pnl_stop = -func.pnl_usd(lots, distance_points, spec)
                    st.info(f"‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ: ${balance:,.2f} | ‡∏£‡∏∞‡∏¢‡∏∞ {distance_points:.0f} points")
                    st.success(f"OptimalLot (All-in): **{lots:.2f} lot**")
                    st.caption(f"‡∏ñ‡πâ‡∏≤‡πÇ‡∏î‡∏ô Stop ‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ${pnl_stop:,.2f}")

        st.divider()
        st.markdown("#### ‡∏™‡∏£‡∏∏‡∏õ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà (‡∏ï‡πà‡∏≠ 1 lot)")
        df = pd.DataFrame({
            "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£": ["$/point/lot", f"$/pip/lot (1 pip = {spec.pip_points} points)"],
            "Value ($)": [func.value_per_point_per_lot(spec), func.value_per_pip_per_lot(spec)]
        })
        st.dataframe(df, use_container_width=True)

    # ---------------- Tab 2: ‡∏£‡∏∞‡∏¢‡∏∞ SL ‚Üí Lot ----------------
    elif st.session_state.mm_tab == "sl":
        st.subheader("üìè ‡∏£‡∏∞‡∏¢‡∏∞ SL ‚Üí ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Lot")

        # Layout: ‡∏ã‡πâ‡∏≤‡∏¢ (‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•) | ‡∏Ç‡∏ß‡∏≤ (‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå)
        left, right = st.columns([1, 1.2])

        with left:
            # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á) ‚Äî ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏õ‡∏ó‡∏≥‡πÉ‡∏ô func.fetch_* ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            price = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (USD)", value=0.0, step=0.1, min_value=0.0)

            # ‡∏ó‡∏∏‡∏ô (default = 1000)
            balance = st.number_input("‡∏ó‡∏∏‡∏ô ($)", value=1000.0, step=100.0, min_value=0.0)

            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î Loss: % ‡∏´‡∏£‡∏∑‡∏≠ $
            loss_mode = st.selectbox("‡∏Å‡∏£‡∏≠‡∏Å Loss ‡πÄ‡∏õ‡πá‡∏ô", ["%", "$"], index=0)
            if loss_mode == "%":
                loss_val = st.number_input("Loss (%)", value=10.0, step=0.5, min_value=0.0)
            else:
                loss_val = st.number_input("Loss ($)", value=100.0, step=10.0, min_value=0.0)

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ Loss ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏ô func)
            risk_amount, loss_pct = func.loss_to_amount_and_pct(balance, loss_mode, loss_val)
            if loss_mode == "%":
                st.caption(f"Loss ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ‚âà **${risk_amount:,.2f}**")
            else:
                st.caption(f"Loss ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ‚âà **{loss_pct:.2f}%** ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏ô")

            # Leverage (‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì MaxLot) ‚Äî default = 1000, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
            leverage = st.number_input("Leverage", value=1000, step=50, min_value=1, format="%d")

            # ‡∏£‡∏∞‡∏¢‡∏∞ Stop (‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á) ‚Äî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°, default = 1000
            custom_points = st.number_input("Stop Loss (Point) - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á", value=1000, step=1, min_value=0, format="%d")

            # ‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
            st.caption("‡∏™‡∏π‡∏ï‡∏£ MaxLot = (‡∏ó‡∏∏‡∏ô √ó Leverage) / (Price √ó ContractSize)")
            st.caption("‡∏™‡∏π‡∏ï‡∏£ Lot (‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î) = ‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ / ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î")

        with right:
            # MaxLot ‡πÄ‡∏ä‡∏¥‡∏á‡∏ó‡∏§‡∏©‡∏é‡∏µ (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏ô func) ‚Äî ‡πÉ‡∏ä‡πâ XAUUSD spec
            max_lot_val = func.maxlot_theoretical(balance, float(leverage), float(price), func.XAUUSD_SPEC)

            # ‡∏£‡∏∞‡∏¢‡∏∞‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
            std_points = [10, 50, 100, 200, 300, 500, 1000, 1500, 2000, 5000, 10000, 20000]
            if custom_points and custom_points not in std_points:
                std_points.append(int(custom_points))
            std_points = sorted(std_points)

            # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á: lot = ‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ / ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î (‡πÉ‡∏ä‡πâ helper ‡πÉ‡∏ô func)
            rows = []
            for pts, lots in func.lots_from_stops(risk_amount, std_points):
                exceeds = lots > max_lot_val if max_lot_val > 0 else False
                rows.append({"Stop Loss (Point)": pts, "Lot (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì)": lots, "‡πÄ‡∏Å‡∏¥‡∏ô MaxLot?": "‚ö†Ô∏è ‡πÉ‡∏ä‡πà" if exceeds else ""})
            df = pd.DataFrame(rows)

            # ‡∏™‡πÑ‡∏ï‡∏•‡πå: ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏≤‡∏á + ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡∏ò‡∏µ‡∏°‡∏°‡πà‡∏ß‡∏á‡∏≠‡πà‡∏≠‡∏ô + ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏°
            def _hl(row):
                return [
                    'background-color: #f3e8ff; color: #111; font-weight: 600;' if row["‡πÄ‡∏Å‡∏¥‡∏ô MaxLot?"] else ''
                    for _ in row
                ]

            sty = (
                df.style
                  .apply(_hl, axis=1)
                  .set_table_styles([{'selector': 'th', 'props': [('text-align', 'center')]}])
                  .set_properties(**{'text-align': 'center'})
                  .format({"Stop Loss (Point)": "{:,.0f}", "Lot (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì)": "{:.2f}"})
            )

            st.markdown(f"**MaxLot (‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô):** {max_lot_val:.2f} lot")
            st.dataframe(sty, use_container_width=True, height=(len(df) + 2) * 33)

            # ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡πÇ‡∏ä‡∏ß‡πå‡πÉ‡∏ï‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
            if custom_points > 0:
                custom_lot = risk_amount / float(custom_points)
                exceeds_custom = custom_lot > max_lot_val if max_lot_val > 0 else False

                st.subheader("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á")
                st.write(f"Stop Loss (Point): **{custom_points:,}** ‚Üí Lot ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏≠‡∏≠‡∏Å ‚âà **{custom_lot:.2f} lot**")
                if exceeds_custom:
                    st.warning("‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏Å‡∏¥‡∏ô MaxLot ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ")

    else:
        st.info("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)")
