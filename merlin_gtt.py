# merlin_gtt.py
from __future__ import annotations

import math
from typing import List, Dict, Literal, Tuple

import pandas as pd
import streamlit as st
import altair as alt

from func import _hr, _hrr, center_latex, info_box, grid_entries

# ===== ‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ) =================================
DEFAULT_PRICE_POINT   = 0.01   # 1 point = 0.01 (‡πÄ‡∏ä‡πà‡∏ô XAU)
DEFAULT_VPP_PER_LOT   = 1.0    # $/point/lot = 1
DEFAULT_CONTRACT_SIZE = 100.0  # contract size ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

GridSide = Literal["LONG", "SHORT"]

# ===== Logic ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á GTT ===================================
def _max_orders_by_risk_after_grid(
    balance: float,
    lot: float,
    buffer_pts: float,
    step_pts: float,
    vpp: float,
) -> int:
    """
    ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏£‡∏ö N ‡πÑ‡∏°‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å buffer_pts ‡∏à‡∏∏‡∏î:
      L(N) = lot * vpp * [ N*buffer_pts + step_pts * N(N-1)/2 ] <= balance
    ‡∏´‡∏≤ N ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≠‡∏î‡∏£‡∏≤‡∏ï‡∏¥‡∏Å (‡∏õ‡∏±‡∏î‡∏•‡∏á)
    """
    if min(balance, lot, buffer_pts, step_pts, vpp) <= 0:
        return 0
    A = (lot * vpp) * (step_pts / 2.0)
    B = (lot * vpp) * (buffer_pts - step_pts / 2.0)
    C = -balance
    disc = B * B - 4 * A * C
    if disc < 0:
        return 0
    n_pos = (-B + math.sqrt(disc)) / (2 * A)  # A>0 ‚Üí ‡∏Ç‡∏≠‡∏ö‡∏ö‡∏ô
    return max(0, math.floor(n_pos)) if n_pos > 0 else 0


def _points_between(a_price: float, b_price: float, price_point: float) -> float:
    """‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'points' ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ a ‚Üí b (‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢)"""
    return (b_price - a_price) / float(price_point)


def _pnl_usd_for_position(entry_price: float, cur_price: float, lot: float, vpp: float, price_point: float, side: GridSide) -> float:
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Floating P/L ‡∏Ç‡∏≠‡∏á 1 ‡πÑ‡∏°‡πâ ‡∏ì ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    pts = _points_between(entry_price, cur_price, price_point)
    sgn = 1.0 if side == "LONG" else -1.0  # LONG: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏á ‚Üí ‡πÅ‡∏û‡πâ (pts<0), SHORT ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
    return lot * vpp * pts * sgn


def _margin_for_position(entry_price: float, lot: float, contract_size: float, leverage: float) -> float:
    """Margin ‡∏Ç‡∏≠‡∏á 1 ‡πÑ‡∏°‡πâ ‚âà (entry * lot * contract) / leverage"""
    if leverage <= 0:
        return 0.0
    cost = entry_price * lot * contract_size
    return cost / float(leverage)


def _simulate_advanced_path(
    *,
    balance: float,
    leverage: float,
    current: float,
    step_pts: int,
    buffer_pts: int,
    lot_size: float,
    price_point: float,
    vpp: float,
    contract_size: float,
    side: GridSide,
    so_level_pct: float,
    step_granularity_pts: int,
) -> Tuple[pd.DataFrame, List[float], List[Dict]]:
    """
    ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á ‚Äú‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‚Äù ‡∏ó‡∏µ‡∏•‡∏∞ step_granularity_pts (points)
    - ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏£‡∏¥‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Equity, Used Margin, Margin Level ‡∏ó‡∏∏‡∏Å‡∏Å‡πâ‡∏≤‡∏ß
    - ‡∏ñ‡πâ‡∏≤ Margin Level <= SO ‚Üí ‡∏ï‡∏±‡∏î‡πÑ‡∏°‡πâ '‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô' ‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞ > SO ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏°‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    ‡∏Ñ‡∏∑‡∏ô:
      curve_df: DataFrame[price, equity, used_margin, margin_level, open_positions]
      entries_filled: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ (‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á ‡∏ì ‡∏à‡∏∏‡∏î‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á)
      liquidations: log ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡πÑ‡∏°‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    """
    sgn_price = -1.0 if side == "LONG" else 1.0
    step_price = sgn_price * step_granularity_pts * price_point
    if step_price == 0:
        step_price = sgn_price * price_point

    # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ buffer_pts points ‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö
    end_price = current + sgn_price * buffer_pts * price_point

    # ‡∏£‡∏∞‡∏î‡∏±‡∏ö ‚Äú‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà‚Äù ‡∏ï‡∏≤‡∏°‡∏Å‡∏£‡∏¥‡∏î step_pts
    grid_prices = grid_entries(
        current_price=current,
        n_orders=10000,  # ‡πÄ‡∏û‡∏î‡∏≤‡∏ô‡∏Å‡∏ß‡πâ‡∏≤‡∏á ‡πÜ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏∂‡∏á‡∏à‡∏£‡∏¥‡∏á
        step_points=step_pts,
        price_point=price_point,
        side=side,
    )

    open_positions: List[float] = []    # entry ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
    liquidations: List[Dict] = []       # log ‡∏ï‡∏±‡∏î‡πÑ‡∏°‡πâ
    curve_rows: List[Dict] = []

    price = current
    next_grid_idx = 0
    reached_tail = False

    while True:
        # ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ï‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏£‡∏¥‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        while next_grid_idx < len(grid_prices):
            gp = grid_prices[next_grid_idx]
            if (side == "LONG" and price <= gp) or (side == "SHORT" and price >= gp):
                open_positions.append(gp)
                next_grid_idx += 1
            else:
                break

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏±‡∏Å
        used_margin = sum(_margin_for_position(ep, lot_size, contract_size, leverage) for ep in open_positions)
        floating_pl = sum(_pnl_usd_for_position(ep, price, lot_size, vpp, price_point, side) for ep in open_positions)
        equity = balance + floating_pl
        margin_level = (equity / used_margin * 100.0) if used_margin > 0 else float("inf")

        curve_rows.append({
            "price": price,
            "open_positions": len(open_positions),
            "equity": equity,
            "used_margin": used_margin,
            "margin_level": margin_level,
        })

        # ‡πÄ‡∏ä‡πá‡∏Ñ SO ‚Üí ‡∏ï‡∏±‡∏î‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö worst-loss-first
        if used_margin > 0 and margin_level <= so_level_pct and len(open_positions) > 0:
            while len(open_positions) > 0:
                # ‡∏´‡∏≤‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î
                worst_idx = None
                worst_pl = 0.0
                for i, ep in enumerate(open_positions):
                    pl = _pnl_usd_for_position(ep, price, lot_size, vpp, price_point, side)
                    if (worst_idx is None) or (pl < worst_pl):
                        worst_idx = i
                        worst_pl = pl

                ep_cut = open_positions.pop(worst_idx)  # ‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
                used_margin = sum(_margin_for_position(ep, lot_size, contract_size, leverage) for ep in open_positions)
                floating_pl = sum(_pnl_usd_for_position(ep, price, lot_size, vpp, price_point, side) for ep in open_positions)
                equity = balance + floating_pl
                margin_level = (equity / used_margin * 100.0) if used_margin > 0 else float("inf")

                liquidations.append({
                    "price": price,
                    "cut_entry": ep_cut,
                    "equity_after": equity,
                    "used_margin_after": used_margin,
                    "margin_level_after(%)": margin_level
                })

                if used_margin <= 0 or margin_level > so_level_pct:
                    break

            curve_rows.append({
                "price": price,
                "open_positions": len(open_positions),
                "equity": equity,
                "used_margin": used_margin,
                "margin_level": margin_level,
            })

            if len(open_positions) == 0 or equity <= 0:
                reached_tail = True

        # ‡∏à‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ñ‡∏∂‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
        if (side == "LONG" and price <= end_price) or (side == "SHORT" and price >= end_price):
            reached_tail = True

        if reached_tail:
            break

        price = price + step_price

    curve_df = pd.DataFrame(curve_rows)
    # entries ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á ‡∏ì ‡∏à‡∏∏‡∏î‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
    entries_filled = open_positions.copy()
    return curve_df, entries_filled, liquidations


# ===== Main Tab ==============================================
def render_gtt_tab(default_mode: str = "Normal") -> None:
    # Header
    st.markdown(
        """
        <div style='display:flex;align-items:baseline;gap:10px;'>
          <h3 style='margin:0;'>üúè GTT ‚Äî Gemini Tenebris Theoria</h3>
          <span style='color:#aaa;font-size:0.9rem;'>Grid Trading Technique</span>
        </div>
        """,
        unsafe_allow_html=True,
    )
    st.caption("Balance in Shadows. Profit in Silence.")
    st.caption("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ ‡πÄ‡∏°‡∏∑‡πà‡∏≠ ‚Äò‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏£‡∏ö N ‡πÑ‡∏°‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å B ‡∏à‡∏∏‡∏î‚Äô ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≥‡∏•‡∏≠‡∏á SO ‡πÅ‡∏ö‡∏ö Advance")

    # --- ‡πÇ‡∏´‡∏°‡∏î (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏≠‡∏£‡πå‡∏•‡∏¥‡∏ô: A=Normal, B=Advanced)
    mode_idx = 0 if str(default_mode).lower() != "advanced" else 1
    mode = st.radio("‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì", options=["Normal", "Advanced"], index=mode_idx, horizontal=True)

    _hr(); _hrr()
    center_latex(r"1~\text{point} = 0.01~\text{price unit},\qquad \$\!/\text{point}/\text{lot} = 1")
    _hrr()

    # --- Inputs (‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°)
    c1, c2, c3 = st.columns([1, 1, 1])
    with c1:
        balance  = st.number_input("‡∏ó‡∏∏‡∏ô ($)", min_value=0.0, value=10000.0, step=100.0)
        leverage = st.number_input("Leverage", min_value=1, value=1000, step=50, format="%d")
    with c2:
        current  = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", min_value=0.0, value=4000.0, step=0.1)
        step_pts = st.number_input("‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á/‡πÑ‡∏°‡πâ (points)", min_value=1, value=1000, step=100)
    with c3:
        buffer_pts = st.number_input(
            "‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏£‡∏ö (points)",
            min_value=1,
            value=50000,
            step=1000,
            help="Normal: ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏£‡∏ö N ‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏µ‡πâ ‚Ä¢ Advanced: ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥",
        )
        lot_size = st.number_input("Lot size (‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πâ)", min_value=0.0, value=0.01, step=0.01)

    side: GridSide = st.radio("‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏£‡∏¥‡∏î", options=["LONG", "SHORT"], horizontal=True, index=0)  # type: ignore

    # ---- Option (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ç‡∏≠) ----
    with st.expander("Option"):
        price_point   = st.number_input("1 point = ‡∏Å‡∏µ‡πà‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤", min_value=0.0001, value=float(DEFAULT_PRICE_POINT), step=0.0001, format="%.4f")
        vpp           = st.number_input("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà ($/point/lot)", min_value=0.0001, value=float(DEFAULT_VPP_PER_LOT), step=0.1)
        contract_size = st.number_input("Contract size", min_value=0.0001, value=float(DEFAULT_CONTRACT_SIZE), step=1.0)

        if mode == "Advanced":
            so_pct    = st.number_input("Stop-out level (%)", min_value=0.0, max_value=100.0, value=30.0, step=1.0)
            step_gran = st.number_input("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á (points/‡∏Å‡πâ‡∏≤‡∏ß)", min_value=1, value=100, step=10,
                                        help="‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏¢‡∏¥‡πà‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡∏ã‡∏≠‡∏¢‡∏à‡∏∏‡∏î‡∏ñ‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô) ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô")

    _hrr()

    # ===================== Normal =====================
    if mode == "Normal":
        center_latex(r"L(N) = \text{lot}\cdot(\$/\text{pt}/\text{lot})\cdot\Big(NB + S\frac{N(N-1)}{2}\Big)\;\le\;\text{balance}")
        center_latex(r"N_{\max} = \left\lfloor \text{root of the inequality above} \right\rfloor")
        _hrr()

        if min(step_pts, buffer_pts, lot_size, price_point, vpp, contract_size) <= 0:
            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏´‡∏•‡∏±‡∏Å ‡πÜ (step, buffer, lot, ‡∏´‡∏ô‡πà‡∏ß‡∏¢ point, $/pt/lot, contract) ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
            return

        n_max = _max_orders_by_risk_after_grid(
            balance=float(balance),
            lot=float(lot_size),
            buffer_pts=float(buffer_pts),
            step_pts=float(step_pts),
            vpp=float(vpp),
        )
        entries = grid_entries(
            current_price=float(current),
            n_orders=int(n_max),
            step_points=float(step_pts),
            price_point=float(price_point),
            side=side,
        )

        st.markdown(
            f"""
            <div style='font-size:1.25rem;font-weight:700;'>
              ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ ‚âà <span style='font-size:1.6rem;'>{n_max:,} ‡πÑ‡∏°‡πâ</span>
            </div>
            """,
            unsafe_allow_html=True,
        )

        st.markdown("#### ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πâ")
        if n_max <= 0 or not entries:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
            return

        rows: List[Dict] = []
        cum_cost = 0.0
        cum_margin = 0.0
        for i, price in enumerate(entries, start=1):
            cost_i   = float(price) * float(lot_size) * float(contract_size)
            margin_i = (cost_i / float(leverage)) if leverage > 0 else 0.0
            cum_cost += cost_i
            cum_margin += margin_i
            rows.append({
                "‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏°‡πâ": i,
                "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤": price,
                "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô/‡πÑ‡∏°‡πâ ($)": cost_i,
                "‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô/‡πÑ‡∏°‡πâ ($)": margin_i,
                "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏° ($)": cum_cost,
                "‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏° ($)": cum_margin,
            })

        df = pd.DataFrame(rows)
        st.dataframe(
            df.style.format({
                "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤": "{:,.2f}",
                "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô/‡πÑ‡∏°‡πâ ($)": "{:,.2f}",
                "‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô/‡πÑ‡∏°‡πâ ($)": "{:,.2f}",
                "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏° ($)": "{:,.2f}",
                "‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏° ($)": "{:,.2f}",
            }).set_properties(**{"text-align":"center"}),
            use_container_width=True,
            height=min(480, (len(df)+2)*33)
        )
        return  # ===== END Normal =====

    # ===================== Advanced =====================
    center_latex(r"\textbf{Advanced SO Model: } \text{‡∏à‡∏≥‡∏•‡∏≠‡∏á Margin Level \& ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö Worst-Loss-First}")
    _hrr()

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏´‡∏•‡∏±‡∏Å + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏•‡∏≠‡∏á
    if min(step_pts, buffer_pts, lot_size, price_point, vpp, contract_size) <= 0:
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏´‡∏•‡∏±‡∏Å ‡πÜ (step, buffer, lot, ‡∏´‡∏ô‡πà‡∏ß‡∏¢ point, $/pt/lot, contract) ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
        return

    so_pct    = locals().get("so_pct", 30.0)
    step_gran = locals().get("step_gran", 100)  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà = 100

    curve_df, entries_filled, liq_logs = _simulate_advanced_path(
        balance=float(balance),
        leverage=float(leverage),
        current=float(current),
        step_pts=int(step_pts),
        buffer_pts=int(buffer_pts),
        lot_size=float(lot_size),
        price_point=float(price_point),
        vpp=float(vpp),
        contract_size=float(contract_size),
        side=side,
        so_level_pct=float(so_pct),
        step_granularity_pts=int(step_gran),
    )

    # ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏ì ‡∏à‡∏∏‡∏î‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á
    n_filled = int(curve_df["open_positions"].iloc[-1]) if not curve_df.empty else 0
    st.markdown(
        f"""
        <div style='font-size:1.1rem;font-weight:700;'>
          ‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‚âà <span style='font-size:1.35rem;'>{n_filled:,} ‡πÑ‡∏°‡πâ</span> 
          (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {int(buffer_pts):,} points ‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö ‚Ä¢ SO {so_pct:.0f}%)
        </div>
        """,
        unsafe_allow_html=True,
    )

    # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ + ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô/‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô (‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á)
    st.markdown("#### ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á)")
    if n_filled <= 0:
        st.info("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πâ‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç SO/‡∏ó‡∏∏‡∏ô ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
    else:
        rows2: List[Dict] = []
        cum_cost = 0.0
        cum_margin = 0.0
        for i, price in enumerate(entries_filled[:n_filled], start=1):
            cost_i   = float(price) * float(lot_size) * float(contract_size)
            margin_i = (cost_i / float(leverage)) if leverage > 0 else 0.0
            cum_cost += cost_i
            cum_margin += margin_i
            rows2.append({
                "‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏°‡πâ": i,
                "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤": price,
                "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô/‡πÑ‡∏°‡πâ ($)": cost_i,
                "‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô/‡πÑ‡∏°‡πâ ($)": margin_i,
                "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏° ($)": cum_cost,
                "‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏° ($)": cum_margin,
            })
        df2 = pd.DataFrame(rows2)
        st.dataframe(
            df2.style.format({
                "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤": "{:,.2f}",
                "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô/‡πÑ‡∏°‡πâ ($)": "{:,.2f}",
                "‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô/‡πÑ‡∏°‡πâ ($)": "{:,.2f}",
                "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏° ($)": "{:,.2f}",
                "‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏° ($)": "{:,.2f}",
            }).set_properties(**{"text-align":"center"}),
            use_container_width=True,
            height=min(480, (len(df2)+2)*33)
        )

    # === ‡∏Å‡∏£‡∏≤‡∏ü: 3 ‡∏≠‡∏±‡∏ô (Equity, Used Margin, Margin Level) ‚Äî ‡∏Å‡∏£‡∏≤‡∏ü‡∏•‡∏∞ 1 ‡πÅ‡∏ñ‡∏ß ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‚Üí‡∏ï‡πà‡∏≥ ===
    if not curve_df.empty:
        st.markdown("#### Equity / Used Margin / Margin Level (‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á)")

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‚Üí‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ ‚Äú‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ã‡πâ‡∏≤‡∏¢‚Äù
        cdf = curve_df.sort_values("price", ascending=False).copy()
        cdf["Equity"] = cdf["equity"]
        cdf["UsedMargin"] = cdf["used_margin"]
        cdf["MarginLevel(%)"] = cdf["margin_level"]

        # Equity
        chart_eq = (
            alt.Chart(cdf)
            .mark_line()
            .encode(
                x=alt.X("price:Q", sort="descending", title="Price (‡∏™‡∏π‡∏á‚Üí‡∏ï‡πà‡∏≥)"),
                y=alt.Y("Equity:Q", title="Equity ($)")
            )
            .properties(height=240, width="container")
        )
        st.altair_chart(chart_eq, use_container_width=True)

        # Used Margin
        chart_um = (
            alt.Chart(cdf)
            .mark_line()
            .encode(
                x=alt.X("price:Q", sort="descending", title="Price (‡∏™‡∏π‡∏á‚Üí‡∏ï‡πà‡∏≥)"),
                y=alt.Y("UsedMargin:Q", title="Used Margin ($)")
            )
            .properties(height=240, width="container")
        )
        st.altair_chart(chart_um, use_container_width=True)

        # Margin Level
        chart_ml = (
            alt.Chart(cdf)
            .mark_line()
            .encode(
                x=alt.X("price:Q", sort="descending", title="Price (‡∏™‡∏π‡∏á‚Üí‡∏ï‡πà‡∏≥)"),
                y=alt.Y("MarginLevel(%):Q", title="Margin Level (%)")
            )
            .properties(height=240, width="container")
        )
        st.altair_chart(chart_ml, use_container_width=True)

    # Log ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡πÑ‡∏°‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if liq_logs:
        st.markdown("#### ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡πÑ‡∏°‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á Stop-out")
        dfL = pd.DataFrame(liq_logs)
        st.dataframe(
            dfL.style.format({
                "price": "{:,.2f}",
                "cut_entry": "{:,.2f}",
                "equity_after": "{:,.2f}",
                "used_margin_after": "{:,.2f}",
                "margin_level_after(%)": "{:,.2f}",
            }).set_properties(**{"text-align":"center"}),
            use_container_width=True,
            height=min(420, (len(dfL)+2)*33)
        )