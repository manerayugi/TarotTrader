# merlin_gtt.py
import math
import pandas as pd
import streamlit as st

# ===== ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡πÅ‡∏Å‡πâ‡πÑ‡∏î‡πâ) =====
DEFAULT_PRICE_POINT = 0.01   # 1 point = 0.01 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô XAU)
DEFAULT_VPP_PER_LOT = 1.0    # $/point/lot = 1 (‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ MM ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)

def _hr(width: int = 360):
    st.markdown(
        f"""
        <div style='text-align:center; margin:14px 0;'>
          <hr style='width: {width}px; border: 1px solid #666; margin: 8px auto;'/>
        </div>
        """,
        unsafe_allow_html=True
    )

def _hrr():
    st.markdown(
        "<div style='text-align:center; margin:10px 0;'>"
        "<hr style='width:360px; border:1px solid #555; margin:8px auto;'/>"
        "</div>",
        unsafe_allow_html=True
    )

def _center_latex(expr: str):
    st.markdown("<div style='text-align:center;'>", unsafe_allow_html=True)
    st.latex(expr)
    st.markdown("</div>", unsafe_allow_html=True)

def _info_box(html: str):
    st.markdown(
        f"""
        <div style="border:1px solid #666; padding:12px 14px;
                    border-radius:10px; background:#202020; color:#e5e7eb;">
          {html}
        </div>
        """,
        unsafe_allow_html=True
    )

def _max_orders_by_remaining(balance: float, lot: float, R: float, S: float, vpp: float) -> int:
    """
    ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏î‡πâ‡∏ß‡∏¢ '‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô' ‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç:
      - ‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏°‡πâ‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô S points
      - ‡∏´‡∏•‡∏±‡∏á‡∏•‡∏á‡πÑ‡∏°‡πâ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏õ‡∏ï‡πà‡∏≠ '‡∏≠‡∏µ‡∏Å R points' ‡∏à‡∏∂‡∏á‡∏à‡∏∞‡πÅ‡∏ï‡∏Å
      - ‡πÅ‡∏ï‡∏Å = ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö balance (‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏•‡∏≠‡∏á Margin Level/Stopout ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)

    Loss ‡∏£‡∏ß‡∏° ‡∏ì ‡∏à‡∏∏‡∏î‡πÅ‡∏ï‡∏Å:
        L(N) = lot * vpp * [ N*R + S * N*(N-1)/2 ]  <= balance

    ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≠‡∏î‡∏£‡∏≤‡∏ï‡∏¥‡∏Å: (lot*vpp)*(S/2) * N^2 + (lot*vpp)*(R - S/2) * N - balance <= 0
    ‡∏´‡∏≤ N ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡∏õ‡∏±‡∏î‡∏•‡∏á)
    """
    if balance <= 0 or lot <= 0 or vpp <= 0 or R <= 0 or S <= 0:
        return 0

    a = (lot * vpp) * (S / 2.0)
    b = (lot * vpp) * (R - S / 2.0)
    c = -balance

    disc = b*b - 4*a*c
    if disc < 0:
        return 0
    sqrt_disc = math.sqrt(disc)

    # ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Å‡∏ö‡∏ß‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏Å‡∏≤‡∏£ aN^2 + bN + c = 0
    n_pos = (-b + sqrt_disc) / (2*a) if a > 0 else 0
    return max(0, math.floor(n_pos))

def _calc_entries(current_price: float, N: int, step_points: float, price_point: float, side: str) -> list[float]:
    """
    ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ N ‡πÑ‡∏°‡πâ ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏ó‡πà‡∏≤ ‡πÜ ‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡∏•‡∏∞ step ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (LONG = ‡∏•‡∏î‡∏•‡∏á, SHORT = ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô)
    """
    if N <= 0:
        return []
    step_price = step_points * price_point
    sgn = -1.0 if side.upper() == "LONG" else 1.0
    return [round(current_price + sgn * i * step_price, 2) for i in range(N)]

def render_gtt_tab():
    # ===== Header (subheader + caption ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) =====
    st.markdown("""
    <div style='display:flex; align-items:baseline; gap:10px;'>
      <h3 style='margin:0;'>üúè GTT ‚Äî Gemini Tenebris Theoria</h3>
      <span style='color:#aaa; font-size:0.9rem;'>Grid Trading Technique</span>
    </div>
    """, unsafe_allow_html=True)
    st.caption("Balance in Shadows. Profit in Silence.")
    st.caption("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ ‡πÇ‡∏î‡∏¢‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‚Äò‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏ó‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏°‡πâ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‚Äô ‡∏≠‡∏µ‡∏Å R points")

    _hr()
    _hrr()
    _center_latex(r"1~\text{point} = 0.01~\text{price unit}\quad,\quad \$\!/\text{point}/\text{lot} = 1")
    _hrr()

    # ===== Inputs =====
    c1, c2, c3 = st.columns([1,1,1])
    with c1:
        balance   = st.number_input("‡∏ó‡∏∏‡∏ô ($)", min_value=0.0, value=10000.0, step=100.0)
        leverage  = st.number_input("Leverage (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏™‡∏π‡∏ï‡∏£‡∏ô‡∏µ‡πâ)", min_value=1, value=1000, step=50, format="%d")
    with c2:
        current   = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", min_value=0.0, value=4000.0, step=0.1)
        step_pts  = st.number_input("‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á/‡πÑ‡∏°‡πâ (points)", min_value=1, value=1000, step=100)
    with c3:
        remain_pts = st.number_input("‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏ó‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏°‡πâ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (points)", min_value=1, value=50000, step=1000,
                                     help="‡πÄ‡∏ä‡πà‡∏ô 50,000 points ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏´‡∏•‡∏±‡∏á‡∏•‡∏á‡πÑ‡∏°‡πâ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏¢‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ß‡∏¥‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å 50,000 points ‡∏Å‡πà‡∏≠‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏ï‡∏Å")
        lot_size  = st.number_input("Lot size (‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πâ)", min_value=0.0, value=0.01, step=0.01)

    side = st.radio("‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏£‡∏¥‡∏î", options=["LONG", "SHORT"], horizontal=True, index=0)

    # (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô) ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢ point / $/pt/lot
    with st.expander("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á (‡∏´‡∏ô‡πà‡∏ß‡∏¢ point ‡πÅ‡∏•‡∏∞ $/pt/lot)"):
        price_point = st.number_input("1 point = ‡∏Å‡∏µ‡πà‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤", min_value=0.0001, value=DEFAULT_PRICE_POINT, step=0.0001, format="%.4f")
        vpp         = st.number_input("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà ($/point/lot)", min_value=0.0001, value=DEFAULT_VPP_PER_LOT, step=0.1)

    _hrr()
    # ===== ‡∏™‡∏π‡∏ï‡∏£ (LaTeX ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏µ + ‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô‡∏ö‡∏ô/‡∏•‡πà‡∏≤‡∏á) =====
    _center_latex(r"""
        \text{‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏° ‡∏ì ‡∏à‡∏∏‡∏î‡πÅ‡∏ï‡∏Å (‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏°‡πâ‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô }S\text{ points)}:\quad
        L(N)=\text{lot}\cdot\frac{\$}{\text{pt}\cdot\text{lot}}\cdot\Big(NR+S\frac{N(N-1)}{2}\Big)
    """)
    _center_latex(r"""
        \text{‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏Å}:\quad L(N)\le B
        \quad\Rightarrow\quad \text{‡πÅ‡∏Å‡πâ‡∏Ñ‡∏ß‡∏≠‡∏î‡∏£‡∏≤‡∏ï‡∏¥‡∏Å‡∏´‡∏≤ }N_{\max}\ \text{‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏±‡∏î‡∏•‡∏á}
    """)
    _hrr()

    # ===== Compute =====
    if step_pts <= 0 or remain_pts <= 0 or lot_size <= 0 or price_point <= 0 or vpp <= 0:
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏´‡∏•‡∏±‡∏Å ‡πÜ (step, remain, lot, ‡∏´‡∏ô‡πà‡∏ß‡∏¢ point, $/pt/lot) ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
        return

    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç '‡πÄ‡∏´‡∏•‡∏∑‡∏≠ R points ‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏°‡πâ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢'
    N_max = _max_orders_by_remaining(
        balance=float(balance),
        lot=float(lot_size),
        R=float(remain_pts),
        S=float(step_pts),
        vpp=float(vpp),
    )

    # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏°‡πâ (‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡πÄ‡∏õ‡πá‡∏ô current_price)
    entries = _calc_entries(current_price=float(current),
                            N=N_max,
                            step_points=float(step_pts),
                            price_point=float(price_point),
                            side=side)

    # ===== Output =====
    st.markdown(
        f"""
        <div style="
            border: 2px solid #22c55e22;
            background: rgba(34,197,94,0.07);
            padding: 16px 18px;
            border-radius: 14px;
            margin: 10px 0 14px 0;">
          <div style="font-size: 1.1rem; font-weight: 800; color: #86efac;">
            ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ
          </div>
          <div style="font-size: 2.6rem; font-weight: 900; margin-top: 4px; line-height: 1;">
            {N_max:,} <span style="font-size: 1.6rem; font-weight: 700;">‡πÑ‡∏°‡πâ</span>
          </div>
          <div style="margin-top: 6px; color:#a3a3a3;">
            ‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏°‡πâ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏¢‡∏±‡∏á‡∏ó‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å <b>{int(remain_pts):,}</b> points
          </div>
        </div>
        """,
        unsafe_allow_html=True
    )

    if entries:
        st.markdown("**‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÑ‡∏°‡πâ (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏°‡πâ):**")
        # st.code(", ".join(f"{p:,.2f}" for p in entries), language="text")

    # ===== ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π) =====
    with st.expander("‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î/‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"):
        _info_box(
            "‡∏´‡∏•‡∏±‡∏Å‡∏Ñ‡∏¥‡∏î: ‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏°‡πâ‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡∏•‡∏∞ S points ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô "
            "‡∏à‡∏ô‡∏Å‡∏£‡∏∞‡∏ó‡∏±‡πà‡∏á‡∏ñ‡πâ‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å ‚Äú‡πÑ‡∏°‡πâ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‚Äù ‡∏≠‡∏µ‡∏Å R points ‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà Equity = 0 (‡πÅ‡∏ï‡∏Å). "
            "‡∏™‡∏°‡∏°‡∏ï‡∏¥ Margin Call/Stopout ‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞ $/point/lot ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"
        )
        if N_max > 0:
            df = pd.DataFrame({
                "‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏°‡πâ": list(range(1, N_max+1)),
                "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤": entries
            })
            st.dataframe(
                df.style.format({"‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤": "{:,.2f}"}).set_properties(**{"text-align":"center"}),
                use_container_width=True,
                height=min(420, (len(df) + 2) * 33)
            )