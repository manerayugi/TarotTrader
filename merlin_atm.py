# merlin_atm.py
from __future__ import annotations

import pandas as pd
import streamlit as st

# ------------------------- Helpers -------------------------
def _grid_prices(start_price: float, n: int, step_points: int, price_point: float, side: str) -> list[float]:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á points ‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á (LONG = ‡∏•‡∏á, SHORT = ‡∏Ç‡∏∂‡πâ‡∏ô)"""
    if n <= 0:
        return []
    step_price = float(step_points) * float(price_point)
    sgn = -1.0 if side == "LONG" else 1.0
    return [round(start_price + sgn * i * step_price, 2) for i in range(n)]

def _last_feasible_index(values: list[float], budget: float) -> int | None:
    """‡∏Ñ‡∏∑‡∏ô index ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å values <= budget (‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏∏‡∏°‡∏î‡πâ‡∏ß‡∏¢ balance)"""
    last = None
    for i, v in enumerate(values):
        if v <= budget:
            last = i
    return last

# ------------------------- Main UI -------------------------
def render_atm_tab():
    st.markdown(
        """
        <div style='display:flex;align-items:baseline;gap:10px;'>
          <h3 style='margin:0;'>üèß ATM ‚Äî Adaptive Trade Matrix</h3>
          <span style='color:#aaa;font-size:0.9rem;'>Grid-based position planner</span>
        </div>
        """,
        unsafe_allow_html=True,
    )
    st.caption("‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏ú‡∏ô‡∏≠‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏ô/‡πÄ‡∏•‡πÄ‡∏ß‡∏≠‡πÄ‡∏£‡∏à ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏Ñ‡∏™ Liquidation Price")

    # ---------------- Inputs ----------------
    c1, c2, c3 = st.columns([1, 1, 1])
    with c1:
        symbol      = st.text_input("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô XAUUSD)", value="XAUUSD", key="atm_symbol")
        balance     = st.number_input("‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô (Balance, $)", min_value=0.0, value=10_000.0, step=100.0, key="atm_balance")
        leverage    = st.number_input("Leverage", min_value=1, value=1000, step=50, format="%d", key="atm_leverage")
    with c2:
        start_price = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", min_value=0.0, value=4000.0, step=0.1, key="atm_start_price")
        lot_size    = st.number_input("Lot Size / ‡πÑ‡∏°‡πâ", min_value=0.0, value=0.01, step=0.01, key="atm_lot")
        contract_sz = st.number_input("Contract Size", min_value=0.0, value=100.0, step=1.0, key="atm_contract")
    with c3:
        liq_price   = st.number_input("Liquidation Price", min_value=0.0, value=1000.0, step=1.0, key="atm_liq_price")
        range_pts   = st.number_input("Range (points)", min_value=1, value=1000, step=100, key="atm_range")
        price_point = st.number_input("1 point = ‡∏Å‡∏µ‡πà‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤", min_value=0.0001, value=0.01, step=0.0001, format="%.4f", key="atm_price_point")

    side = st.radio("‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏£‡∏¥‡∏î", options=["LONG", "SHORT"], horizontal=True, index=0, key="atm_side")

    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏´‡πâ‡∏Å‡∏ß‡πâ‡∏≤‡∏á ‡πÜ (‡∏Ñ‡∏∏‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ó‡∏∏‡∏ô/‡πÄ‡∏•‡πÄ‡∏ß‡∏≠‡πÄ‡∏£‡∏à‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
    max_orders = st.slider("‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)", min_value=1, max_value=300, value=120, step=1, key="atm_max_orders")

    st.markdown("---")

    # ---------------- Validate ----------------
    if lot_size <= 0 or contract_sz <= 0 or price_point <= 0 or range_pts <= 0:
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Lot Size, Contract Size, price/point ‡πÅ‡∏•‡∏∞ Range (points) ‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
        return

    # ---------------- Generate grid ----------------
    prices = _grid_prices(
        start_price=float(start_price),
        n=int(max_orders),
        step_points=int(range_pts),
        price_point=float(price_point),
        side=side,
    )

    # ---------------- Compute (‡∏™‡∏≠‡∏á‡πÄ‡∏Ñ‡∏™: liq=0 ‡πÅ‡∏•‡∏∞ liq = ‡∏Ñ‡πà‡∏≤‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï) ----------------
    rows = []
    cum_cost_0 = 0.0
    cum_margin_0 = 0.0
    cum_cost_liq = 0.0
    cum_margin_liq = 0.0

    for i, p in enumerate(prices, start=1):
        # ‡πÄ‡∏Ñ‡∏™‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÑ‡∏°‡πà‡∏°‡∏µ Liq)
        cost_i_0 = float(p) * float(lot_size) * float(contract_sz)
        margin_i_0 = (cost_i_0 / float(leverage)) if leverage > 0 else 0.0
        cum_cost_0 += cost_i_0
        cum_margin_0 += margin_i_0

        # ‡πÄ‡∏Ñ‡∏™‡∏°‡∏µ Liq: ‚Äú‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‚Äù ‡∏Ñ‡∏¥‡∏î‡∏à‡∏≤‡∏Å (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å - liq_price) * lot * contract (‡∏ñ‡πâ‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 0)
        span = max(float(p) - float(liq_price), 0.0) if side == "LONG" else max(float(liq_price) - float(p), 0.0)
        cost_i_liq = span * float(lot_size) * float(contract_sz)
        margin_i_liq = (cost_i_liq / float(leverage)) if leverage > 0 else 0.0
        cum_cost_liq += cost_i_liq
        cum_margin_liq += margin_i_liq

        rows.append({
            "‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà": i,
            "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÑ‡∏°‡πâ": p,

            # ‡πÄ‡∏Ñ‡∏™ Liq = 0
            "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô/‡πÑ‡∏°‡πâ ($)": cost_i_0,
            "‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô/‡πÑ‡∏°‡πâ ($)": margin_i_0,
            "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏° ($)": cum_cost_0,
            "‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏° ($)": cum_margin_0,

            # ‡πÄ‡∏Ñ‡∏™ Liq = ‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï (‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏á‡∏ó‡∏µ‡πà)
            "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô/‡πÑ‡∏°‡πâ @Liq ($)": cost_i_liq,
            "‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô/‡πÑ‡∏°‡πâ @Liq ($)": margin_i_liq,
            "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏° @Liq ($)": cum_cost_liq,
            "‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏° @Liq ($)": cum_margin_liq,
        })

    df = pd.DataFrame(rows)

    # ---------------- Highlight rule ----------------
    # ‡∏Ñ‡∏∏‡∏°‡∏î‡πâ‡∏ß‡∏¢ ‚Äú‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‚Äù = ‚Äú‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏°‚Äù ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô balance
    base_cum_margin_col = "‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏° ($)"
    liq_cum_margin_col  = "‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏° @Liq ($)"

    base_idx = _last_feasible_index(df[base_cum_margin_col].tolist(), float(balance))
    liq_idx  = _last_feasible_index(df[liq_cum_margin_col].tolist(), float(balance))

    # ‡∏™‡∏µ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå (‡∏™‡∏≠‡∏á‡∏Å‡∏£‡∏ì‡∏µ)
    base_color = "background-color: rgba(59,130,246,.25);"   # ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
    liq_color  = "background-color: rgba(239,68,68,.25);"    # ‡πÅ‡∏î‡∏á‡∏≠‡πà‡∏≠‡∏ô

    def _hl_row(r):
        styles = [''] * len(r)
        if base_idx is not None and r.name == base_idx:
            styles = [base_color] * len(r)
        if liq_idx is not None and r.name == liq_idx:
            # ‡∏ñ‡πâ‡∏≤‡∏ä‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà ‡πÉ‡∏ä‡πâ pattern ‡∏ú‡∏™‡∏°
            if base_idx is not None and r.name == base_idx:
                styles = ["background: linear-gradient(90deg, rgba(59,130,246,.25) 0%, rgba(239,68,68,.25) 100%);"] * len(r)
            else:
                styles = [liq_color] * len(r)
        return styles

    # ---------------- Render ----------------
    st.markdown(
        f"""
        <div style="display:flex; gap:10px; align-items:center; flex-wrap:wrap;">
          <div><b>Symbol:</b> {symbol}</div>
          <div><b>Direction:</b> {side}</div>
          <div><b>Balance:</b> ${balance:,.2f}</div>
          <div><b>Leverage:</b> {int(leverage):,}√ó</div>
          <div><b>Start:</b> {start_price:,.2f}</div>
          <div><b>Range:</b> {range_pts:,} pts (1 pt = {price_point:.4f})</div>
          <div><b>Lot/‡πÑ‡∏°‡πâ:</b> {lot_size:.2f}</div>
          <div><b>Contract:</b> {contract_sz:,.0f}</div>
          <div><b>Liq:</b> {liq_price:,.2f}</div>
        </div>
        """,
        unsafe_allow_html=True
    )

    # legend
    st.caption(
        "üîµ ‡πÅ‡∏ñ‡∏ß‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô = ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà ‚Äú‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏°‚Äù ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô Balance (‡πÄ‡∏Ñ‡∏™ Liq = 0)  ‚Ä¢  "
        "üî¥ ‡πÅ‡∏ñ‡∏ß‡∏™‡∏µ‡πÅ‡∏î‡∏á = ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà ‚Äú‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏°‚Äù ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô Balance (‡πÄ‡∏Ñ‡∏™ Liq = ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î)"
    )

    # ---- ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç: ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà' ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ù‡∏±‡∏á‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ----
    fmt = {
        "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÑ‡∏°‡πâ": "{:,.2f}",
        "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô/‡πÑ‡∏°‡πâ ($)": "{:,.2f}",
        "‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô/‡πÑ‡∏°‡πâ ($)": "{:,.2f}",
        "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏° ($)": "{:,.2f}",
        "‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏° ($)": "{:,.2f}",
        "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô/‡πÑ‡∏°‡πâ @Liq ($)": "{:,.2f}",
        "‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô/‡πÑ‡∏°‡πâ @Liq ($)": "{:,.2f}",
        "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏° @Liq ($)": "{:,.2f}",
        "‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏° @Liq ($)": "{:,.2f}",
    }

    sty = (
        df.style
          .format(fmt)
          .apply(_hl_row, axis=1)
          .set_table_styles([{'selector': 'th', 'props': [('text-align', 'center')]}])
          .set_properties(**{'text-align': 'center'})
    )
    st.dataframe(sty, use_container_width=True, height=min(560, (len(df) + 2) * 33))

    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≠‡∏á‡∏Å‡∏£‡∏ì‡∏µ (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
    st.markdown("---")
    colA, colB = st.columns(2)
    with colA:
        if base_idx is not None:
            st.success(
                f"üîµ ‡πÄ‡∏Ñ‡∏™ Liq=0: ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î **{base_idx+1:,} ‡πÑ‡∏°‡πâ**  | "
                f"‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì **${df.loc[base_idx, base_cum_margin_col]:,.2f}** (‚â§ ${balance:,.2f})"
            )
        else:
            st.warning("üîµ ‡πÄ‡∏Ñ‡∏™ Liq=0: ‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡πÅ‡∏£‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô Balance")
    with colB:
        if liq_idx is not None:
            st.success(
                f"üî¥ ‡πÄ‡∏Ñ‡∏™ Liq={liq_price:,.2f}: ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î **{liq_idx+1:,} ‡πÑ‡∏°‡πâ**  | "
                f"‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì **${df.loc[liq_idx, liq_cum_margin_col]:,.2f}** (‚â§ ${balance:,.2f})"
            )
        else:
            st.warning(f"üî¥ ‡πÄ‡∏Ñ‡∏™ Liq={liq_price:,.2f}: ‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡πÅ‡∏£‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô Balance")